{"version":3,"sources":["components/UI/DatePicker/DatePicker.css","App.css","components/UI/DatePicker/DatePicker.js","components/UI/SearchForm/SearchForm.js","containers/EventFinder/EventFinder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DatePickerContainer","ExtraMargin","DateBox","open","Overlay","App","AppHeader","formatDateDisplay","date","defaultText","format","DatePicker","state","dateRangePicker","selection","startDate","Date","endDate","addDays","key","visible","toggleVisibility","_this","setState","toggleOveraly","which","payload","this","Object","defineProperty","objectSpread","_this2","react_default","a","createElement","className","classes","onClick","Input","type","readOnly","value","join","dist","onChange","e","handleRangeChange","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","Component","searchForm","props","Container","Form","onSubmit","submit","Group","style","justifyContent","width","loading","name","searchValue","searchChange","placeholder","UI_DatePicker_DatePicker","Button","content","primary","EventFinder","isLoading","inputValueHandler","target","console","log","formSubmitHandler","preventDefault","SearchForm","column","containers_EventFinder_EventFinder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41c00d94.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DatePickerContainer\":\"DatePicker__DatePickerContainer__3-io1\",\"ExtraMargin\":\"DatePicker__ExtraMargin__3lbGT\",\"DateBox\":\"DatePicker__DateBox__rzPuU\",\"open\":\"DatePicker__open__3J43s\",\"Overlay\":\"DatePicker__Overlay__3Kydd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__3Ge-C\",\"AppHeader\":\"App__AppHeader__3MRQK\"};","import React, { Component } from 'react';\r\nimport { DateRange  } from 'react-date-range';\r\nimport { format, addDays } from 'date-fns';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\nimport classes from './DatePicker.css'\r\n\r\nfunction formatDateDisplay(date, defaultText) {\r\n  if (!date) return defaultText;\r\n  return format(date, 'DD/MM/YYYY');\r\n}\r\n\r\nclass DatePicker extends Component {\r\n\r\n\tstate = {\r\n\t\tdateRangePicker: {\r\n\t\t\tselection: {\r\n\t\t\t\tstartDate: new Date(),\r\n\t\t\t\tendDate: addDays(new Date(), 7),\r\n\t\t\t\tkey: 'selection',\r\n\t\t\t},\r\n\t\t},\r\n\t\tvisible: false\r\n\t}\r\n\r\n\ttoggleVisibility = () => this.setState({ visible: !this.state.visible });\r\n\r\n\ttoggleOveraly = () => this.setState({visible: false});\r\n\r\n\thandleRangeChange(which, payload) {\r\n    // console.log('which', which, 'payload', payload);\r\n    this.setState({\r\n      [which]: {\r\n        ...this.state[which],\r\n        ...payload,\r\n      },\r\n    });\r\n  }\r\n\r\n\trender() {\r\n\t\tconst { visible } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<div className={classes.DatePickerContainer}>\r\n\t\t\t<div className={visible ? classes.Overlay : null} onClick={this.toggleOveraly}></div>\r\n\t\t\t\t<Input \r\n\t\t\t\t\tclassName={classes.ExtraMargin}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\tonClick={this.toggleVisibility}\r\n\t\t\t\t\tvalue={formatDateDisplay(this.state.dateRangePicker.selection.startDate)} \r\n\t\t\t\t/>\r\n\t\t\t\t<Input \r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\tonClick={this.toggleVisibility}\r\n\t\t\t\t\tvalue={formatDateDisplay(this.state.dateRangePicker.selection.endDate)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className={visible ? [classes.DateBox, classes.open].join(' ') : classes.DateBox}>\r\n\t\t\t\t\t\t<DateRange\r\n\t\t\t\t\t\t\tonChange={(e) => this.handleRangeChange('dateRangePicker', e)}\r\n\t\t\t\t\t\t\tshowSelectionPreview={false}\r\n\t\t\t\t\t\t\tmoveRangeOnFirstSelection={false}\r\n\t\t\t\t\t\t\tmonths={2}\r\n\t\t\t\t\t\t\tranges={[this.state.dateRangePicker.selection]}\r\n\t\t\t\t\t\t\tdirection=\"horizontal\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default DatePicker;","import React from 'react';\r\n\r\nimport DatePicker from '../DatePicker/DatePicker';\r\nimport { Container, Form } from 'semantic-ui-react'\r\n\r\nconst searchForm = (props) => {\r\n\r\n  const datePickerHandler = () => {\r\n    console.log('test2');\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Form onSubmit={props.submit}>\r\n        <Form.Group style={{justifyContent: 'center'}}>\r\n          <Form.Input width={6} loading name='searchValue' value={props.searchValue} onChange={props.searchChange} placeholder='Search...' />\r\n          <DatePicker />\r\n          <Form.Button type=\"submit\" content='Szukaj' primary />\r\n        </Form.Group>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default searchForm;","import React, { Component } from 'react';\r\n\r\nimport SearchForm from '../../components/UI/SearchForm/SearchForm';\r\n\r\nclass EventFinder extends Component {\r\n\r\n  state = {\r\n    searchValue: '',\r\n    isLoading: false\r\n  }\r\n\r\n  inputValueHandler = (e) => {\r\n    this.setState({[e.target.name]: e.target.value});\r\n    console.log(e.target.value);\r\n  }\r\n\r\n  formSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    // this.setState({value: e.target.value});\r\n    // console.log(e.target.value);\r\n    console.log('test');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <SearchForm \r\n          column={8}\r\n          searchValue={this.state.searchValue}\r\n          searchChange={this.inputValueHandler}\r\n          isLoading={this.state.isLoading}\r\n          submit={this.formSubmitHandler} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventFinder;\r\n","import React, { Component } from 'react';\r\n\r\nimport EventFinder from './containers/EventFinder/EventFinder';\r\nimport classes from './App.css';\r\nimport 'react-date-range/dist/styles.css';\r\nimport 'react-date-range/dist/theme/default.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className={classes.App}>\r\n        <header className={classes.AppHeader}>\r\n          <EventFinder />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}